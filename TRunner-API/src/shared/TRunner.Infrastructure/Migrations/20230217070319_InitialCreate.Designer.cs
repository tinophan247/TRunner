// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TRunner.Infrastructure.ConnectionStrings;

#nullable disable

namespace TRunner.Infrastructure.Migrations
{
    [DbContext(typeof(TRunnerDbContext))]
    [Migration("20230217070319_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GroupSport", b =>
                {
                    b.Property<int>("GroupsGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SportsSportId")
                        .HasColumnType("int");

                    b.HasKey("GroupsGroupId", "SportsSportId");

                    b.HasIndex("SportsSportId");

                    b.ToTable("GroupSport");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<int>("GroupsGroupId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("GroupsGroupId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("GroupImageUrl")
                        .HasMaxLength(225)
                        .HasColumnType("varchar");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("varchar");

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("GroupUUId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<int>("IsActive")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<sbyte>("IsPublished")
                        .HasMaxLength(1)
                        .HasColumnType("tinyint");

                    b.Property<string>("Location")
                        .HasMaxLength(225)
                        .HasColumnType("varchar");

                    b.Property<int>("TotalRunner")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Website")
                        .HasMaxLength(225)
                        .HasColumnType("varchar");

                    b.HasKey("GroupId");

                    b.HasIndex("GroupName")
                        .IsUnique();

                    b.HasIndex("GroupTypeId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.GroupType", b =>
                {
                    b.Property<int>("GroupTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupTypeName")
                        .IsRequired()
                        .HasColumnType("enum('Company/Workplace', 'Racing Team', 'Club', 'Shop', 'Other')");

                    b.Property<string>("GroupTypeUUId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<int>("IsActive")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("GroupTypeId");

                    b.HasIndex("GroupTypeName")
                        .IsUnique();

                    b.ToTable("GroupType");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.Sport", b =>
                {
                    b.Property<int>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(225)
                        .HasColumnType("varchar");

                    b.Property<int>("IsActive")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<string>("SportName")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("varchar");

                    b.Property<int>("SportTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SportUUId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SportId");

                    b.HasIndex("SportName")
                        .IsUnique();

                    b.HasIndex("SportTypeId");

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.SportType", b =>
                {
                    b.Property<int>("SportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IsActive")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<string>("SportTypeName")
                        .IsRequired()
                        .HasColumnType("enum('Foot Sports', 'Cycle Sports', 'Water Sports', 'Winter Sports', 'Other Sports')");

                    b.Property<string>("SportTypeUUId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SportTypeId");

                    b.HasIndex("SportTypeName")
                        .IsUnique();

                    b.ToTable("SportType");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(225)
                        .HasColumnType("varchar");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("varchar");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(225)
                        .HasColumnType("varchar");

                    b.Property<int>("IsActive")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<sbyte>("IsRunner")
                        .HasMaxLength(1)
                        .HasColumnType("tinyint");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserUUId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleId");

                    b.HasIndex("Email", "UserRoleId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IsActive")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("enum('Admin', 'Runner')");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserRoleUUId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.ViewPermissionType", b =>
                {
                    b.Property<int>("ViewPermissionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IsActive")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ViewPermission")
                        .IsRequired()
                        .HasColumnType("enum('Everyone', 'Friends', 'Only me')");

                    b.Property<string>("ViewPermissionTypeUUId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.HasKey("ViewPermissionTypeId");

                    b.HasIndex("ViewPermission")
                        .IsUnique();

                    b.ToTable("ViewPermissionType");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.WorkoutDetailByTime", b =>
                {
                    b.Property<int>("WorkoutDetailByTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IsActive")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WorkoutDetailByTimeUUId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<string>("WorkoutDetailData")
                        .IsRequired()
                        .HasColumnType("mediumtext");

                    b.Property<int>("WorkoutSummaryId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutDetailByTimeId");

                    b.HasIndex("WorkoutSummaryId")
                        .IsUnique();

                    b.ToTable("WorkoutDetailByTime");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.WorkoutImage", b =>
                {
                    b.Property<int>("WorkoutImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IsActive")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WorkoutImageUUId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<string>("WorkoutImageUrl")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("varchar");

                    b.Property<int>("WorkoutSummaryId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutImageId");

                    b.HasIndex("WorkoutSummaryId");

                    b.ToTable("WorkoutImage");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.WorkoutSummary", b =>
                {
                    b.Property<int>("WorkoutSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("AvgSpeed")
                        .HasColumnType("float");

                    b.Property<float>("Calories")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<float>("Distance")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Hr")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Step")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<float>("Temperature")
                        .HasColumnType("float");

                    b.Property<int>("Time")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("varchar");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ViewPermissionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("WorkoutSummaryUUId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("char");

                    b.HasKey("WorkoutSummaryId");

                    b.HasIndex("SportId");

                    b.HasIndex("UserRoleId");

                    b.HasIndex("ViewPermissionTypeId");

                    b.ToTable("WorkoutSummary");
                });

            modelBuilder.Entity("GroupSport", b =>
                {
                    b.HasOne("TRunner.Domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRunner.Domain.Entities.Sport", null)
                        .WithMany()
                        .HasForeignKey("SportsSportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("TRunner.Domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRunner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TRunner.Domain.Entities.Group", b =>
                {
                    b.HasOne("TRunner.Domain.Entities.GroupType", "GroupType")
                        .WithMany("Groups")
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupType");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.Sport", b =>
                {
                    b.HasOne("TRunner.Domain.Entities.SportType", "SportType")
                        .WithMany("Sports")
                        .HasForeignKey("SportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportType");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.User", b =>
                {
                    b.HasOne("TRunner.Domain.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.WorkoutDetailByTime", b =>
                {
                    b.HasOne("TRunner.Domain.Entities.WorkoutSummary", "WorkoutSummary")
                        .WithOne("WorkoutDetailByTime")
                        .HasForeignKey("TRunner.Domain.Entities.WorkoutDetailByTime", "WorkoutSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutSummary");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.WorkoutImage", b =>
                {
                    b.HasOne("TRunner.Domain.Entities.WorkoutSummary", "WorkoutSummary")
                        .WithMany("WorkoutImages")
                        .HasForeignKey("WorkoutSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutSummary");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.WorkoutSummary", b =>
                {
                    b.HasOne("TRunner.Domain.Entities.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRunner.Domain.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRunner.Domain.Entities.ViewPermissionType", "ViewPermissionType")
                        .WithMany("WorkoutSummaries")
                        .HasForeignKey("ViewPermissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("UserRole");

                    b.Navigation("ViewPermissionType");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.GroupType", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.SportType", b =>
                {
                    b.Navigation("Sports");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.ViewPermissionType", b =>
                {
                    b.Navigation("WorkoutSummaries");
                });

            modelBuilder.Entity("TRunner.Domain.Entities.WorkoutSummary", b =>
                {
                    b.Navigation("WorkoutDetailByTime")
                        .IsRequired();

                    b.Navigation("WorkoutImages");
                });
#pragma warning restore 612, 618
        }
    }
}
